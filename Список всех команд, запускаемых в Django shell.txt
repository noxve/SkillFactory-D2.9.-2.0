Список всех команд, запускаемых в Django

Создать двух пользователей (с помощью метода User.objects.create_user('username')):
ul=User.objects.create_user(username='NoX') 
u2=User.objects.create_user(username='BoX')

Создать два объекта модели Author, связанные с пользователями: 
Author. objects. create (authorllser=ul) 
Author. objects. create (authorllser=u2)

Добавить 4 категории в модель Category:
Category.objects.create(name='IT') 
Category.objects.create(name='CARS') 
Category.objects.create(name='BOKS') 
Category.objects.create(name='PRODUCTION')

Добавить 2 статьи и 1 новость: 
author = Author.objects.get(id=l) 
authorl = Author.objects.get(id=2)
Post.objects.create(author=author, categoryType='NW', title='sometitle', text='somebigtext')
Post.objects.create(author=author, categoryType='AR', title='sometitle', text='somebigtext') 
Post.objects.create(author=authorl, categoryType='AR', title='sometitle', text='somebigtext')

Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий):
Post.objects.get(id=l).postCategory.add(Category.objects.get(id=l))
Post.objects.get(id=l).postCategory.add(Category.objects.get(id=3))
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2))
Post.objects.get(id=3).postCategory.add(Category.objects.get(id=4))

Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий):
Comment.objects.create(commentPost=Post.objects.get(id=l), commentUser=Author.objects.get(id=l).authorUser,	text='anytextbyauthor')
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=l).authorUser,	text='anytextbyauthor')
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser,	text='anytextbyauthor')
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=l).authorUser,	text='anytextbyauthor')

Применяя функции like() и dislikeQ к статьям/новостям и комментариям, скорректировать рейтинги этих объектов:
Comment.objects.get(id=l).like()
Comment.objects.get(id=l).like()
Comment.objects.get(id=2).dislike()
Comment.objects.get(id=3).dislike()
Comment.objects.get(id=3).dislike()
Comment.objects.get(id=4).like()

Post.objects.get(id=l).like()
Post.objects.get(id=2).dislike()
Post.objects.get(id=3).dislike()
Post.objects.get(id=3).like()

Post.objects.get(id=l).rating
Post.objects.get(id=2).rating
Post.objects.get(id=3).rating
Post.objects.get(id=3).rating

Comment.objects.get(id=l).rating
Comment.objects.get(id=2).rating
Comment.objects.get(id=3).rating
Comment.objects.get(id=4).rating

Обновить рейтинги пользователей:
>>> a=Author.objects.get(id=l)
>>> b=Author.objects.get(id=2)
>>> a.update_rating()
>>> b.update_rating()
>>> a.ratingAuthor
>>> b.ratingAuthor

Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):
а = Author.objects.order_by('-ratingAuthor')[:1]

Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к
>>> а = Post.objects.order_by('-rating') 
>>> for i in a:
	  i.dateCreation
	  i.author
	  i.rating
        i.title 	 
        i.preview

Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье:
>>> а = Comment.objects.order_by('-rating') 
>>> for i in a:
	  i.dateCreation
	  i.commentUser
	  i.rating
	  i.text




